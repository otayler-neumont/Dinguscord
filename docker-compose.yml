version: '3.8'

services:
  authentication-service:
    build: ./AuthenticationService
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=auth
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=your_jwt_secret_for_development_only
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      - postgres
      - redis

  chat-room-service:
    build: ./ChatRoomService
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=chatroom
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      - postgres

  message-handling-service:
    build: ./MessageHandlingService
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=messages
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      - postgres
      - redis
      - rabbitmq

  user-presence-service:
    build: ./UserPresenceService
    ports:
      - "3004:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      - redis

  notification-service:
    build: ./NotificationService
    ports:
      - "3005:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      - rabbitmq

  api-gateway:
    build: ./ApiGateway
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - AUTH_SERVICE_URL=http://authentication-service:3000
      - CHATROOM_SERVICE_URL=http://chat-room-service:3000
      - MESSAGE_SERVICE_URL=http://message-handling-service:3000
      - PRESENCE_SERVICE_URL=http://user-presence-service:3000
      - NOTIFICATION_SERVICE_URL=http://notification-service:3000
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8080/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    depends_on:
      - authentication-service
      - chat-room-service
      - message-handling-service
      - user-presence-service
      - notification-service

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_MULTIPLE_DATABASES=auth,chatroom,messages
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./docker-scripts/create-multiple-postgres-databases.sh:/docker-entrypoint-initdb.d/create-multiple-postgres-databases.sh

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data:
