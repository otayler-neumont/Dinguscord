version: '3.8'

services:
  authentication-service:
    build: 
      context: ./AuthenticationService
      dockerfile: Dockerfile.windows
    ports:
      - "3001:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=auth
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - JWT_SECRET=your_jwt_secret_for_development_only
    # Simplified health check for Windows
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    restart: unless-stopped

  chat-room-service:
    build:
      context: ./ChatRoomService
      dockerfile: Dockerfile
    ports:
      - "3002:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=chatroom
      - DB_USER=postgres
      - DB_PASSWORD=postgres
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  message-handling-service:
    build:
      context: ./MessageHandlingService
      dockerfile: Dockerfile.windows
    ports:
      - "3003:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=messages
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
      rabbitmq:
        condition: service_started
    restart: unless-stopped

  user-presence-service:
    build:
      context: ./UserPresenceService
      dockerfile: Dockerfile
    ports:
      - "3004:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      redis:
        condition: service_started
    restart: unless-stopped

  notification-service:
    build:
      context: ./NotificationService
      dockerfile: Dockerfile
    ports:
      - "3005:3000"
    environment:
      - NODE_ENV=development
      - PORT=3000
      - RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:3000/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      rabbitmq:
        condition: service_started
    restart: unless-stopped

  frontend:
    build:
      context: ./DingusGui
      dockerfile: Dockerfile.dev
    ports:
      - "5173:5173"
    environment:
      - NODE_ENV=development
    volumes:
      - ./DingusGui/DingusMessaging:/app:delegated
      - /app/node_modules
    restart: unless-stopped

  api-gateway:
    build:
      context: ./ApiGateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - NODE_ENV=development
      - PORT=8080
      - AUTH_SERVICE_URL=http://authentication-service:3000
      - CHATROOM_SERVICE_URL=http://chat-room-service:3000
      - MESSAGE_SERVICE_URL=http://message-handling-service:3000
      - PRESENCE_SERVICE_URL=http://user-presence-service:3000
      - NOTIFICATION_SERVICE_URL=http://notification-service:3000
    healthcheck:
      test: ["CMD-SHELL", "wget --quiet --tries=1 --spider http://localhost:8080/health || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 40s
    depends_on:
      authentication-service:
        condition: service_healthy
      chat-room-service:
        condition: service_healthy
      message-handling-service:
        condition: service_healthy
      user-presence-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
    restart: unless-stopped

  postgres:
    image: postgres:14-alpine
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=postgres
      # Create multiple databases manually since script might have line ending issues
    volumes:
      - postgres-data:/var/lib/postgresql/data
      # Removed the bash script mount to avoid line ending issues
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: unless-stopped

  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672" # AMQP port
      - "15672:15672" # Management UI
    environment:
      - RABBITMQ_DEFAULT_USER=guest
      - RABBITMQ_DEFAULT_PASS=guest
    volumes:
      - rabbitmq-data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD", "rabbitmq-diagnostics", "check_port_connectivity"]
      interval: 30s
      timeout: 30s
      retries: 5
      start_period: 60s
    restart: unless-stopped

volumes:
  postgres-data:
  redis-data:
  rabbitmq-data: 